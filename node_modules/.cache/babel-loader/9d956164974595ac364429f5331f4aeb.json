{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marcosandaluzderosas/Desktop/NuclioDigitalSchool/Picturest/picturestRichard/picturestReact/src/components/boards/boardList/BoardsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport BoardCard from \"../boardCard/BoardCard\";\nimport \"../boardList/boardList.css\"; //ESTO AHORA SERIA BOARD USER LIST, YA QUE MUESTRA SOLO LOS BOARDS DEl USUARIo CORreSPNDIENTE.\n//hay que hacer uno igual pero que fetchee /api/boards, o sea getall. o realmente solo de\n\nconst BoardsList = () => {\n  _s();\n\n  // necesitamos coger los boards del ID correspndiente\n  const [boards, setBoards] = useState([]);\n  const [pinsInfo, setPinsInfo] = useState([]);\n  const localStorageUser = JSON.parse(localStorage.getItem(\"user\"));\n  let userId = null;\n\n  if (localStorageUser === null) {\n    userId = 1;\n  } else {\n    userId = localStorageUser._id;\n  }\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/users/${userId}/boards`) //http://localhost:5000/api/users/21/boards ruta correcta\n    .then(promise => {\n      if (promise.status === 200) {\n        return promise.json();\n      }\n    }).then(json => setBoards(json));\n  }, []);\n  console.log(boards); //array vacio.\n\n  let boardId = [];\n  boards.map(board => {\n    boardId.push(board._id);\n    console.log(boardId); ///esta es la clave de todo. quiza un fetch for each esos ID. :o\n  });\n  console.log(boardId);\n  useEffect(() => {\n    boardId.map(boardId => {\n      fetch(`http://localhost:5000/api/boards/${boardId}/pins`) //http://localhost:5000/api/users/21/boards ruta correcta\n      .then(promise => {\n        if (promise.status === 200) {\n          return promise.json(); //Se queda solamente con el valor del ultimo fetch.\n        }\n      }).then(json => setPinsInfo(json));\n    });\n  }, [boards]);\n  console.log(pinsInfo);\n  let urlImage = [];\n  pinsInfo.map(pins => {\n    console.log(pins.urlImage);\n    urlImage.push(pins.urlImage);\n  });\n  console.log(urlImage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"boardsList__title\",\n      children: \"Boards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardsList__container\",\n      children: boards.map(board => /*#__PURE__*/_jsxDEV(BoardCard, {\n        board: board,\n        urlImage: urlImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoardsList, \"CYSRbN3i3OK1JKk5N0q/y2hkFQA=\");\n\n_c = BoardsList;\nexport default BoardsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardsList\");","map":{"version":3,"sources":["/Users/marcosandaluzderosas/Desktop/NuclioDigitalSchool/Picturest/picturestRichard/picturestReact/src/components/boards/boardList/BoardsList.js"],"names":["React","useState","useEffect","BoardCard","BoardsList","boards","setBoards","pinsInfo","setPinsInfo","localStorageUser","JSON","parse","localStorage","getItem","userId","_id","fetch","then","promise","status","json","console","log","boardId","map","board","push","urlImage","pins"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BoardCard from \"../boardCard/BoardCard\";\nimport \"../boardList/boardList.css\";\n\n//ESTO AHORA SERIA BOARD USER LIST, YA QUE MUESTRA SOLO LOS BOARDS DEl USUARIo CORreSPNDIENTE.\n//hay que hacer uno igual pero que fetchee /api/boards, o sea getall. o realmente solo de\nconst BoardsList = () => {\n  // necesitamos coger los boards del ID correspndiente\n  const [boards, setBoards] = useState([]);\n\n  const [pinsInfo, setPinsInfo] = useState([]);\n\n  const localStorageUser = JSON.parse(localStorage.getItem(\"user\"));\n\n  let userId = null;\n  if (localStorageUser === null) {\n    userId = 1;\n  } else {\n    userId = localStorageUser._id;\n  }\n\n  useEffect(() => {\n    fetch(`http://localhost:5000/api/users/${userId}/boards`) //http://localhost:5000/api/users/21/boards ruta correcta\n      .then((promise) => {\n        if (promise.status === 200) {\n          return promise.json();\n        }\n      })\n      .then((json) => setBoards(json));\n  }, []);\n\n  console.log(boards);\n  //array vacio.\n  let boardId = [];\n\n  boards.map((board) => {\n    boardId.push(board._id);\n    console.log(boardId); ///esta es la clave de todo. quiza un fetch for each esos ID. :o\n  });\n  console.log(boardId);\n\n  useEffect(() => {\n    boardId.map((boardId) => {\n      fetch(`http://localhost:5000/api/boards/${boardId}/pins`) //http://localhost:5000/api/users/21/boards ruta correcta\n        .then((promise) => {\n          if (promise.status === 200) {\n            return promise.json(); //Se queda solamente con el valor del ultimo fetch.\n          }\n        })\n        .then((json) => setPinsInfo(json));\n    });\n  }, [boards]);\n\n  console.log(pinsInfo);\n  let urlImage = [];\n\n  pinsInfo.map((pins) => {\n    console.log(pins.urlImage);\n    urlImage.push(pins.urlImage);\n  });\n\n  console.log(urlImage);\n\n  return (\n    <div>\n      <span className=\"boardsList__title\">Boards</span>\n      <div className=\"boardsList__container\">\n        {boards.map((board) => (\n          <BoardCard board={board} urlImage={urlImage} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BoardsList;\n"]},"metadata":{},"sourceType":"module"}